"""
Django settings for meuprojeto project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from django.core.exceptions import ImproperlyConfigured
from pathlib import Path
import os # ou from pathlib import Path se já estiver usando Path
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) 
# Ou a versão com Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

import os
from pathlib import Path
from django.core.exceptions import ImproperlyConfigured

# ... (seus BASE_DIR e outros imports)

# SECRET_KEY
# Use a variável de ambiente DJANGO_SECRET_KEY.
# Se não estiver definida (ex: durante collectstatic sem build-arg),
# use uma chave dummy para permitir a inicialização do settings.
# **IMPORTANTE:** ESTA CHAVE DUMMY NÃO DEVE SER USADA EM PRODUÇÃO REAL.
# A EasyPanel continuará a injetar a SECRET_KEY real em runtime.
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')
if not SECRET_KEY:
    # Esta chave é apenas para que o collectstatic e outros comandos de build/teste
    # possam carregar o settings.py sem levantar ImproperlyConfigured.
    # Em produção, a EasyPanel injetará a SECRET_KEY real que você definiu.
    SECRET_KEY = 'a-dummy-secret-key-for-build-time-only-do-not-use-in-prod-12345'
    # Opcional: print para depuração para confirmar que a dummy key está sendo usada
    # print("WARNING: Using dummy SECRET_KEY for build process.")


# DEBUG
DEBUG = os.environ.get('DJANGO_DEBUG', 'False').lower() == 'true'
print(f"DEBUG setting is: {DEBUG}") # <-- Adicione esta linha

# ALLOWED_HOSTS
ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', '').split(',')

# Para o collectstatic e outros comandos de gerência, o Django precisa de ALLOWED_HOSTS
# mesmo que DEBUG seja False.
# Podemos usar uma lógica similar para ALLOWED_HOSTS para o build
if not DEBUG and not ALLOWED_HOSTS:
    # Se em DEBUG=False e ALLOWED_HOSTS não definido (durante build, por exemplo),
    # use um fallback seguro para o build/collectstatic.
    # Em runtime, o valor da EasyPanel será usado.
    ALLOWED_HOSTS = ['localhost', '127.0.0.1']
    # print("WARNING: Using dummy ALLOWED_HOSTS for build process.")
    # Não levante ImproperlyConfigured aqui para evitar quebrar o build.


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    'contas',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'meuprojeto.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'meuprojeto.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'HOST': os.environ.get('DB_HOST'),
        'PORT': os.environ.get('DB_PORT', '5432'), # '5432' é o padrão, útil como fallback
    }
}

CSRF_TRUSTED_ORIGINS = [
    "https://teste-rodrigo-test.5udrnk.easypanel.host",
    # Adicione outros domínios se sua aplicação for acessível por mais de um
    # Ex: "https://www.seudominio.com",
    # "http://localhost:8000" # Para desenvolvimento local, se for o caso
]

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Adicione esta configuração: Lista de diretórios onde o Django procurará
# por arquivos estáticos adicionais, além dos diretórios 'static' dos apps.
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'), # Aponta para uma pasta 'static' na raiz do projeto
]

# --- ADICIONE ESTA LINHA ---
# Diretório onde o collectstatic irá juntar todos os arquivos estáticos para produção
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_production') 

# Configuração para Whitenoise (apenas esta linha)
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# --- ADICIONE AS CONFIGURAÇÕES DE MÍDIA ABAIXO ---
# URL base para servir os arquivos de mídia enviados pelos usuários
MEDIA_URL = '/media/'

# Caminho no sistema de arquivos onde os arquivos de mídia serão armazenados
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# --- FIM DAS NOVAS CONFIGURAÇÕES DE MÍDIA ---

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Para onde redirecionar após o login bem-sucedido
LOGIN_REDIRECT_URL = '/' # Redireciona para a página inicial

# Para onde redirecionar após o logout
LOGOUT_REDIRECT_URL = '/' # Redireciona para a página inicial

LOGIN_URL = '/contas/login/'

# Configuração de Email para Desenvolvimento (envia para o console)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'naoresponda@sua-plataforma.com' # Um email padrão

# ATENÇÃO: Para produção, use variáveis de ambiente!
# Exemplo com python-dotenv:
# import os
# from dotenv import load_dotenv
# load_dotenv() # Carrega .env

USE_TZ = True
TIME_ZONE = 'America/Sao_Paulo' # Ou o fuso horário da sua aplicação

# Adicione este formato para que o Django possa parsear as strings com 'Z' e milissegundos
DATETIME_INPUT_FORMATS = [
    '%Y-%m-%dT%H:%M:%S.%fZ',  # Formato com milissegundos e 'Z'
    '%Y-%m-%dT%H:%M:%SZ',    # Formato sem milissegundos e 'Z'
    '%Y-%m-%dT%H:%M:%S.%f',  # ISO 8601 com milissegundos
    '%Y-%m-%dT%H:%M:%S',     # ISO 8601 sem milissegundos
    # Adicione outros formatos que você usa, se houver
]

# --- CONFIGURAÇÕES DAILY.CO ---
# Chave da API do Daily.co para videochamadas
DAILY_CO_API_KEY = os.environ.get('DAILY_CO_API_KEY', '')

# --- CONFIGURAÇÕES STRIPE ---
# Chaves públicas e secretas do Stripe para pagamentos
STRIPE_PUBLIC_KEY = os.environ.get('STRIPE_PUBLIC_KEY', '')
STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY', '')
STRIPE_WEBHOOK_SECRET = os.environ.get('STRIPE_WEBHOOK_SECRET', '')

# Validação das chaves obrigatórias (apenas em produção)
if not DEBUG:
    if not DAILY_CO_API_KEY:
        print("WARNING: DAILY_CO_API_KEY não está configurada. Videochamadas podem não funcionar.")
    if not STRIPE_SECRET_KEY:
        print("WARNING: STRIPE_SECRET_KEY não está configurada. Pagamentos podem não funcionar.")
    if not STRIPE_WEBHOOK_SECRET:
        print("WARNING: STRIPE_WEBHOOK_SECRET não está configurada. Webhooks do Stripe podem não funcionar.")